import { useState } from "react"
import { GoalCreate, GoalSteps } from ".";
import { v4 as uuidv4 } from "uuid"

export default function AddGoal({ className }) {
  const [goal, setGoal] = useState({ name: "" });
  const [goalSelected, setGoalSelected] = useState(false);
  const [steps, setSteps] = useState(null);
  const [submitError, setSubmitError] = useState("");
  const defaultClasses = "body max-w-7xl items-center justify-center";
  const combinedClasses = className ? `addGoal ${defaultClasses} ${className}` : "addGoal " + defaultClasses;

  // clear all fields, go to goal create screen
  function reset() {
    setGoal({ name: "" });
    setGoalSelected(false);
    setSteps(null);
    setSubmitError("");
  }

  async function getAiResponse() {
    if (goal.name) {

      // go to step edit page
      setGoalSelected(true);

      // have chatGPT generate steps
      // if (btnName === "generate") {

      // do the fetch call here with async
      try {
        const query = await fetch('/api/openai', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userGoal: goal.name }),
        });

        if (!query.ok) {
          throw new Error('Network response was not ok');
        }

        let aiResponse = await query.json()

        // Log server response
        // console.log("This is response in GoalCreate.jsx", aiResponse);

        const payload = aiResponse.payload;

        if (payload.content && payload.content.length > 0) {
          const firstContentItem = payload.content[0];

          if (firstContentItem.text && firstContentItem.text.value) {
            var userSteps;
            var textValue;

            try {
              textValue = JSON.parse(firstContentItem.text.value);
              userSteps = textValue.steps
            }
            catch (err) {
              throw new Error(firstContentItem.text.value);
            }

            if (!textValue.steps)
              throw new Error(textValue.error);

            // Generate steps
            generateSteps(userSteps);
          }
        }

      } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
        setSubmitError(error.message);
        setGoalSelected(false);
      }

      // }
      // does not call chatGPT API
      // else if (btnName === "no-generate") {
      //   setSteps([{ uuid: uuidv4(), title: "", text: "", completed: false }]);
      // }
    }
    else
      // display error if goal field is empty
      setSubmitError("Goal cannot be blank!");
  }

  // add generated steps created by chatGPT
  function generateSteps(steps) {

    // confirm it is an array and Map to format the steps
    if (Array.isArray(steps)) {
      const formattedAIResponse = steps.map(function (step) {
        return { uuid: uuidv4(), title: step, text: "", completed: false };
      });

      setSteps(formattedAIResponse);
    }
    else {
      console.log("Steps is not an array!");
      setGoalSelected(false);
      setSubmitError("I could not understand your input. Please try again with a different goal.");
    }
  }

  return (
    <div className={combinedClasses}>
      <p className="paragraphStep"></p>

      <div className="goal-container ">
        {/* if no goal has been submitted, display goal create form */}
        {!goalSelected ? (
          <>
            <GoalCreate
              goal={goal}
              setGoal={setGoal}
              setSubmitError={setSubmitError}
              getAiResponse={getAiResponse}
            ></GoalCreate>
          </>
        ) :
          // if goal has been submitted, render this
          <>
            {/* makes sure steps exist before rendering */}
            {steps ? (
              <GoalSteps
                steps={steps}
                setSteps={setSteps}
                reset={reset}
                goal={goal}
                setGoal={setGoal}
                setSubmitError={setSubmitError}
                usage="createGoal"
                getAiResponse={getAiResponse}
              ></GoalSteps>
            ) : (
              // while waiting on API response, display this
              // below code generated by https://loading.io/
              <div className="loadingio-spinner-bean-eater-zwyhx5ec3yq ml-8"><div className="ldio-wa7k0r94wz9">
                <div className=""><div></div><div></div><div></div></div><div><div></div><div></div><div></div></div>
              </div></div>
            )}
          </>
        }
        {submitError && (<div className="text-red-600 ms-2 poppins">
          {submitError}
        </div>)
        }
      </div>
    </div>
  )
}



