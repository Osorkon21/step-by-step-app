import { useState, useRef, useEffect } from "react"

export default function StepBarOpen({ goal, step, steps, setSteps, handleInputChange, handleStepBarClick }) {
  const [submitError, setSubmitError] = useState("");
  const [loading, setLoading] = useState(false);
  const textRef = useRef(null);
  const titleRef = useRef(null);

  function handleExplainStep(e) {
    e.preventDefault();
    const userGoal = goal.name

    if (!step.title) {
      setSubmitError("Step must have a title!")
      return;
    }
    else if (!userGoal) {
      setSubmitError("Goal must have a title!")
      return;
    }

    setLoading(true);
    getDescription();
  }

  async function getDescription() {
    const uuid = step.uuid;
    let aiResponse;
    setSubmitError("");

    aiResponse = step.title;

    // do the fetch call here with async
    try {
      const query = await fetch('/api/openai/explain', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ goalTitle: goal.name, stepTitle: step.title }),
      });

      const response = await query.json();

      if (response.result === "success") {
        aiResponse = response.payload.content[0].text.value;

        setSteps(steps.map(step => {
          if (step.uuid !== uuid)
            return step;
          return {
            ...step,
            text: aiResponse
          };
        }));
      }
      else {
        throw new Error('Bad response from openAI API call');
      }
    } catch (error) {
      console.error('OpenAI fetch operation error', error.message);
      setSubmitError(error.message);
    }

    setLoading(false);
  }

  useEffect(() => {
    const titleArea = titleRef.current;

    if (titleArea) {
      titleArea.style.height = 'auto';
      titleArea.style.height = `${titleArea.scrollHeight}px`;
    }
  }, [step.title]);

  useEffect(() => {
    const textArea = textRef.current;

    if (textArea) {
      textArea.style.height = 'auto';
      // Set the height to scrollHeight to fit the content
      textArea.style.height = `${textArea.scrollHeight}px`;
    }
  }, [step.text]);

  return (
    <div className="curent_step_open truncate flex flex-col gap-1 cursor-pointer w-full" onClick={handleStepBarClick}>
      <div className="w-full">
        <textarea ref={titleRef} data-uuid={step.uuid} className={`w-full shadow-custom p-2 pl-4 overflow-y-hidden focus:bg-white hover:bg-white focus:outline-none bg-lightgray focus:shadow`} name="title" value={step.title} placeholder="Step title" onChange={handleInputChange} />
      </div>

      <div className="">

        {step.text ?

          <textarea ref={textRef} data-uuid={step.uuid} className={`w-full shadow-custom px-4 p-2 overflow-y-hidden focus:bg-white hover:bg-white focus:outline-none bg-lightgray focus:shadow`} name="text" value={step.text} placeholder="Step description" onChange={handleInputChange} />
          :
          <>
            {submitError &&
              (<div className="text-red-600 ms-2">
                {submitError}
              </div>)
            }

            {loading ?
              // below code generated by https://loading.io/
              <div className="loadingio-spinner-blocks-xjt6aoemvak"><div className="ldio-jlyegyo6g8">
                <div style={{ left: "38px", top: "38px", animationDelay: "0s" }}></div><div style={{ left: "80px", top: "38px", animationDelay: "0.125s" }}></div><div style={{ left: "122px", top: "38px", animationDelay: "0.25s" }}></div><div style={{ left: "38px", top: "80px", animationDelay: "0.875s" }}></div><div style={{ left: "122px", top: "80px", animationDelay: "0.375s" }}></div><div style={{ left: "38px", top: "122px", animationDelay: "0.75s" }}></div><div style={{ left: "80px", top: "122px", animationDelay: "0.625s" }}></div><div style={{ left: "122px", top: "122px", animationDelay: "0.5s" }}></div>
              </div></div>
              :
              <button className="update-goal-btn hover:scale-95 mt-2" type="button" name="explain-step" onClick={handleExplainStep}>More Info</button>
            }
          </>
        }
      </div>
    </div>
  )
}
